#include "smmap/diminishing_rigidity_model.h"

#include <stdexcept>
#include <limits>

using namespace smmap;

////////////////////////////////////////////////////////////////////////////////
/// Constructors and Destructor
////////////////////////////////////////////////////////////////////////////////

DiminishingRigidityModel::DiminishingRigidityModel(
        const ObjectPointSet& object_initial_configuration, double k )
    : DiminishingRigidityModel( object_initial_configuration, k, k )
{}

DiminishingRigidityModel::DiminishingRigidityModel(
        const ObjectPointSet& object_initial_configuration, double k_translation, double k_rotation )
    : object_initial_configuration_( object_initial_configuration )
    , k_translation_( k_translation )
    , k_rotation_( k_rotation )
{
    if ( k_translation <= 0 )
    {
        throw new std::invalid_argument("k_translation must be greater than 0");
    }
    if ( k_rotation <= 0 )
    {
        throw new std::invalid_argument("k_rotation must be greater than 0");
    }
}

////////////////////////////////////////////////////////////////////////////////
/// Static member initialization
////////////////////////////////////////////////////////////////////////////////

/// TODO: remove this magic number for the noise generated by this distribution
std::normal_distribution< double > DiminishingRigidityModel::perturbation_distribution =
    std::normal_distribution< double >( 0, 0.1 );

////////////////////////////////////////////////////////////////////////////////
/// Virtual function overrides
////////////////////////////////////////////////////////////////////////////////

ObjectTrajectory DiminishingRigidityModel::doGetPrediction(
        const ObjectPointSet& object_configuration,
        const std::vector< GripperTrajectory>& gripper_trajectories,
        const std::vector< kinematics::VectorVector6d >& gripper_velocities ) const
{
    assert( gripper_trajectories.size() > 0 );
    assert( gripper_velocities.size() == gripper_trajectories.size() );

    ObjectTrajectory object_traj( gripper_trajectories[0].size(), object_configuration );
    return object_traj;
}

void DiminishingRigidityModel::doPerturbModel( std::mt19937_64& generator )
{
    k_translation_ += perturbation_distribution( generator );
    k_rotation_ += perturbation_distribution( generator );

    if ( k_translation_ <= 0 )
    {
        k_translation_ = std::numeric_limits< double >::epsilon();
    }
    if ( k_rotation_ <= 0 )
    {
        k_rotation_ = std::numeric_limits< double >::epsilon();
    }
}
